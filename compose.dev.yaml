# Despliegue para ambiente/s de desarrollo
services:

  web-server: # Nombre arbitrario para servicio
    image: nginx:1.18 # Descargar (la 1a vez) y usar esta imagen, obtenida del dockerhub registry
    ports: # Mapeo de puertos del host al container respectivamente
        - "80:80" # array
    volumes:
        - ./web_server/nginx/conf.d:/etc/nginx/conf.d

  vanilla_php:
    build: # Para este servicio en vez de una image predefinida, la personalizamos con un Dockerfile
        dockerfile: ./vanilla_php/Dockerfile
    volumes:
        - ./vanilla_php/src:/var/www/html
        - ./vanilla_php//development/sites-available:/etc/apache2/sites-available

  mysql_server:
    image: mysql:lts
    ports:
        - "3306:3306"
    environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        TZ: ${TZ}
    volumes:
        # Al crearse el contenedor, se buscaran archivos con extensiones .sh, .sql y .sql.gz que se encuentren en `/docker-entrypoint->initdb.d`, y se ejecutaran en orden alfabetico.
        # Entonces, se puede popular el servicio montando un dump hacie ese directorio. Por defecto se importaran a la base de datos especificada en la variable MYSQL_DATABASE.
        - ./mysql_server/config/dump.sql:/docker-entrypoint-initdb.d/start.sql
